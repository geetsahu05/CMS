<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Room Booking System</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Inter', sans-serif;
        }
        
        .building-card {
            transition: all 0.3s ease;
            border-left: 4px solid transparent;
        }
        
        .building-card:hover, .building-card.selected {
            transform: translateY(-2px);
            border-left-color: #3b82f6;
        }
        
        .floor-card {
            transition: all 0.2s ease;
        }
        
        .floor-card:hover, .floor-card.selected {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .room-card {
            transition: all 0.2s ease;
        }
        
        .room-card:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
        }
        
        .room-card.selected {
            border-color: #3b82f6;
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.2);
        }
        
        .status-badge {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
        }
        
        .progress-bar {
            transition: width 0.3s ease;
        }
        
        .selection-counter {
            animation: pulse 1.5s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        
        .unbooking-mode .room-card.booked {
            cursor: pointer;
        }
        
        .unbooking-mode .room-card.booked:hover {
            background-color: #fef3c7;
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">

    <!-- Header -->
    <header class="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-4 shadow-lg">
        <div class="container mx-auto flex justify-between items-center">
            <div class="flex items-center space-x-3">
                <div class="bg-white/20 p-3 rounded-lg">
                    <i class="fas fa-calendar-check text-2xl"></i>
                </div>
                <div>
                    <h1 class="text-2xl font-bold">Room Booking System</h1>
                    <p class="text-blue-100 text-sm">Batch Coordinator Dashboard</p>
                </div>
            </div>
            <div class="text-right">
                <p class="text-lg font-semibold"><%= currentBC.name %></p>
                <p class="text-sm text-blue-100"><%= currentBC.email %></p>
            </div>
        </div>
    </header>

    <!-- Main Container -->
    <div class="flex h-screen pt-2">
        <!-- Left Sidebar (Building List) -->
        <aside class="w-1/4 bg-white shadow-lg p-5 border-r border-gray-200">
            <div class="mb-6">
                <h2 class="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                    <i class="fas fa-building mr-2 text-blue-500"></i> Buildings
                </h2>
                <div class="space-y-3">
                    <% buildings.forEach(building => { %>
                        <button id="building-<%= building._id %>" 
                            onclick="showFloors('<%= building._id %>', '<%= building.building_name %>')" 
                            class="building-card w-full text-left bg-white p-4 rounded-lg border border-gray-200 hover:shadow-md transition-all">
                            <div class="flex items-center">
                                <div class="bg-blue-100 p-2 rounded-full mr-3">
                                    <i class="fas fa-building text-blue-500"></i>
                                </div>
                                <div class="flex-1">
                                    <h3 class="font-semibold text-gray-800"><%= building.building_name %></h3>
                                    <p class="text-sm text-gray-600"><%= building.Total_floors %> Floors</p>
                                </div>
                                <i class="fas fa-chevron-right text-gray-400"></i>
                            </div>
                        </button>
                    <% }); %>
                </div>
            </div>
            
            <!-- Selection Counter -->
            <div id="selectionCounter" class="bg-blue-50 p-4 rounded-lg border border-blue-200 hidden">
                <div class="flex items-center justify-between">
                    <span class="text-sm font-medium text-blue-800">Selected Rooms</span>
                    <span id="selectedCount" class="bg-blue-600 text-white px-2 py-1 rounded-full text-xs font-bold">0</span>
                </div>
                <div class="mt-2 bg-white rounded-full h-2">
                    <div id="selectionProgress" class="progress-bar bg-blue-600 h-2 rounded-full" style="width: 0%"></div>
                </div>
            </div>
        </aside>

        <!-- Right Section (Floors & Rooms) -->
        <main class="w-3/4 p-6 overflow-y-auto" id="mainContent">
            <!-- Breadcrumb -->
            <nav class="flex mb-6" aria-label="Breadcrumb">
                <ol class="flex items-center space-x-2 text-sm text-gray-600">
                    <li><a href="#" class="hover:text-blue-600">Buildings</a></li>
                    <li><span class="mx-2">/</span></li>
                    <li id="breadcrumbBuilding" class="hidden"><span class="text-gray-400">Select Floor</span></li>
                    <li><span class="mx-2 hidden" id="breadcrumbSeparator">/</span></li>
                    <li id="breadcrumbFloor" class="hidden"><span class="text-gray-400">Select Rooms</span></li>
                </ol>
            </nav>

            <!-- Selected Building Title -->
            <div id="selectedBuildingTitle" class="hidden mb-6">
                <h2 class="text-2xl font-bold text-gray-800 mb-2 flex items-center">
                    <i class="fas fa-building text-blue-500 mr-2"></i>
                    <span id="buildingName"></span>
                </h2>
                <p class="text-gray-600">Please select a floor to view available rooms</p>
            </div>

            <!-- Floors Section -->
            <div id="floorsSection" class="hidden">
                <h3 class="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                    <i class="fas fa-layer-group text-blue-500 mr-2"></i>
                    Available Floors
                </h3>
                <div id="floorsContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"></div>
            </div>

            <!-- Rooms Section -->
            <div id="roomsSection" class="hidden mt-8">
                <div class="flex justify-between items-center mb-6">
                    <h3 class="text-xl font-semibold text-gray-800 flex items-center">
                        <i class="fas fa-door-open text-blue-500 mr-2"></i>
                        Available Rooms
                    </h3>
                    <div id="roomStats" class="text-sm text-gray-600 hidden">
                        <span id="availableCount" class="bg-green-100 text-green-800 px-2 py-1 rounded-full">0 available</span>
                        <span id="bookedCount" class="bg-red-100 text-red-800 px-2 py-1 rounded-full ml-2">0 booked</span>
                    </div>
                </div>
                <div id="roomsContainer" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"></div>
            </div>

            <!-- Action Buttons -->
            <div class="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 shadow-lg">
                <div class="container mx-auto flex justify-between items-center">
                    <div id="selectionSummary" class="text-sm text-gray-600 hidden">
                        <span id="summaryText">0 rooms selected</span>
                    </div>
                    <div class="flex space-x-3">
                        <button id="unbookButton" onclick="toggleUnbookingMode()" 
                            class="bg-red-500 hover:bg-red-600 text-white px-6 py-3 rounded-lg font-medium transition-colors">
                            <i class="fas fa-times-circle mr-2"></i> Free Selected Rooms
                        </button>
                        
                        <form id="bookingForm" action="/bookRooms" method="POST" class="hidden">
                            <input type="hidden" name="selectedRooms" id="selectedRooms">
                            <button type="submit" 
                                class="bg-green-500 hover:bg-green-600 text-white px-6 py-3 rounded-lg font-medium transition-colors">
                                <i class="fas fa-check-circle mr-2"></i> Book Selected Rooms
                            </button>
                        </form>
                        
                        <button onclick="clearSelection()" 
                            class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-3 rounded-lg font-medium transition-colors hidden"
                            id="clearButton">
                            <i class="fas fa-undo mr-2"></i> Clear Selection
                        </button>

                        <button id="confirmUnbookButton" onclick="confirmUnbooking()" 
                            class="bg-orange-500 hover:bg-orange-600 text-white px-6 py-3 rounded-lg font-medium transition-colors hidden">
                            <i class="fas fa-check-circle mr-2"></i> Confirm Unbooking
                        </button>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        let selectedRooms = [];
        let selectedBuildingId = null;
        let selectedFloorId = null;
        let currentBuildingName = '';
        let totalRooms = 0;
        let isUnbookingMode = false;

        // Function to fetch and display floors
        function showFloors(buildingId, buildingName) {
            selectedBuildingId = buildingId;
            currentBuildingName = buildingName;
            exitUnbookingMode(); // Exit unbooking mode when changing buildings

            // Update UI: Highlight selected building
            document.querySelectorAll('.building-card').forEach(card => card.classList.remove('selected', 'bg-blue-50'));
            document.getElementById(`building-${buildingId}`).classList.add('selected', 'bg-blue-50');

            // Update breadcrumb
            document.getElementById('breadcrumbBuilding').classList.remove('hidden');
            document.getElementById('breadcrumbBuilding').innerHTML = buildingName;
            document.getElementById('breadcrumbSeparator').classList.remove('hidden');

            // Show Building Name
            document.getElementById('selectedBuildingTitle').classList.remove('hidden');
            document.getElementById('buildingName').textContent = buildingName;

            fetch(`/getFloors/${buildingId}`)
                .then(response => response.json())
                .then(data => {
                    const floorsContainer = document.getElementById("floorsContainer");
                    floorsContainer.innerHTML = "";
                    
                    data.floors.forEach(floor => {
                        floorsContainer.innerHTML += `
                            <div id="floor-${floor._id}" 
                                onclick="showRooms('${floor._id}', '${floor.floor_Number}')" 
                                class="floor-card bg-white p-5 rounded-lg border border-gray-200 hover:border-blue-300 cursor-pointer transition-all">
                                <div class="flex items-center">
                                    <div class="bg-blue-100 p-3 rounded-full mr-4">
                                        <i class="fas fa-layer-group text-blue-500"></i>
                                    </div>
                                    <div class="flex-1">
                                        <h4 class="font-semibold text-gray-800">Floor ${floor.floor_Number}</h4>
                                        <p class="text-sm text-gray-600">Click to view rooms</p>
                                    </div>
                                    <i class="fas fa-chevron-right text-gray-400"></i>
                                </div>
                            </div>
                        `;
                    });
                    
                    document.getElementById("floorsSection").classList.remove("hidden");
                    document.getElementById("roomsSection").classList.add("hidden");
                    document.getElementById("bookingForm").classList.add("hidden");
                    document.getElementById("unbookButton").classList.remove("hidden");
                    document.getElementById("clearButton").classList.add("hidden");
                    document.getElementById("selectionCounter").classList.add("hidden");
                    document.getElementById("confirmUnbookButton").classList.add("hidden");
                });
        }

        // Function to fetch and display rooms
        function showRooms(floorId, floorNumber) {
            selectedFloorId = floorId;
            exitUnbookingMode(); // Exit unbooking mode when changing floors
    
            // Update UI: Highlight selected floor
            document.querySelectorAll('.floor-card').forEach(card => card.classList.remove('selected', 'bg-blue-50'));
            document.getElementById(`floor-${floorId}`).classList.add('selected', 'bg-blue-50');
    
            // Update breadcrumb
            document.getElementById('breadcrumbFloor').classList.remove('hidden');
            document.getElementById('breadcrumbFloor').innerHTML = `Floor ${floorNumber}`;
    
            fetch(`/getRooms/${floorId}`)
                .then(response => response.json())
                .then(data => {
                    const roomsContainer = document.getElementById("roomsContainer");
                    roomsContainer.innerHTML = "";
                    
                    let availableCount = 0;
                    let bookedCount = 0;
                    totalRooms = data.rooms.length;
    
                    data.rooms.forEach(room => {
                        let isBooked = room.booking_status === "Booked";
                        if (isBooked) bookedCount++; else availableCount++;
                        
                        const roomCard = document.createElement('div');
                        roomCard.id = `room-${room._id}`;
                        roomCard.className = `room-card p-4 rounded-lg border-2 ${
                            isBooked ? 'border-red-200 bg-red-50 booked' : 'border-green-200 bg-green-50'
                        } cursor-pointer transition-all`;
                        
                        roomCard.addEventListener('click', function(event) {
                            // Don't trigger room selection if clicking on input fields
                            if (event.target.tagName === 'INPUT') {
                                return;
                            }
                            toggleRoom(room._id, isBooked);
                        });
                        
                        roomCard.innerHTML = `
                            <div class="flex justify-between items-start mb-3">
                                <h3 class="text-lg font-semibold text-gray-800">Room ${room.room_Number}</h3>
                                <span class="status-badge ${
                                    isBooked ? 'bg-red-100 text-red-800' : 'bg-green-100 text-green-800'
                                }">
                                    ${room.booking_status}
                                </span>
                            </div>
                            
                            ${isBooked ? `
                                <div class="space-y-1 text-sm text-gray-600">
                                    <p><i class="fas fa-user mr-2"></i> ${room.Booked_by?.userEmail || "N/A"}</p>
                                    <p><i class="fas fa-tag mr-2"></i> ${room.Booked_by?.userType || "N/A"}</p>
                                    ${room.branch ? `<p><i class="fas fa-code-branch mr-2"></i> ${room.branch}</p>` : ''}
                                    ${room.batch ? `<p><i class="fas fa-users mr-2"></i> ${room.batch}</p>` : ''}
                                </div>
                            ` : `
                                <div class="space-y-2 mt-3" onclick="event.stopPropagation()">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">
                                            <i class="fas fa-code-branch mr-1"></i> Branch
                                        </label>
                                        <input type="text" id="branch-${room._id}" 
                                            class="w-full p-2 border rounded-md text-sm focus:ring-2 focus:ring-blue-300 focus:border-transparent" 
                                            placeholder="e.g., CSE, ECE, ME"
                                            oninput="updateRoomBranchBatch('${room._id}')">
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-1">
                                            <i class="fas fa-users mr-1"></i> Batch
                                        </label>
                                        <input type="text" id="batch-${room._id}" 
                                            class="w-full p-2 border rounded-md text-sm focus:ring-2 focus:ring-blue-300 focus:border-transparent" 
                                            placeholder="e.g., 2023, 2024"
                                            oninput="updateRoomBranchBatch('${room._id}')">
                                    </div>
                                </div>
                            `}
                        `;
                        
                        roomsContainer.appendChild(roomCard);
                    });
    
                    // Update room statistics
                    document.getElementById('roomStats').classList.remove('hidden');
                    document.getElementById('availableCount').textContent = `${availableCount} available`;
                    document.getElementById('bookedCount').textContent = `${bookedCount} booked`;
    
                    document.getElementById("roomsSection").classList.remove("hidden");
                    document.getElementById("bookingForm").classList.remove("hidden");
                    document.getElementById("unbookButton").classList.remove("hidden");
                    document.getElementById("clearButton").classList.remove("hidden");
                    document.getElementById("selectionCounter").classList.remove("hidden");
                    
                    updateSelectionUI();
                });
        }

        // Toggle unbooking mode
        function toggleUnbookingMode() {
            if (isUnbookingMode) {
                exitUnbookingMode();
            } else {
                enterUnbookingMode();
            }
        }

        function enterUnbookingMode() {
            isUnbookingMode = true;
            clearSelection();
            
            // Update UI for unbooking mode
            document.getElementById('mainContent').classList.add('unbooking-mode');
            document.getElementById('unbookButton').classList.add('hidden');
            document.getElementById('confirmUnbookButton').classList.remove('hidden');
            document.getElementById('bookingForm').classList.add('hidden');
            
            // Update instructions
            document.getElementById('summaryText').innerHTML = 
                '<span class="text-orange-600"><i class="fas fa-info-circle mr-1"></i> Select rooms to unbook</span>';
            document.getElementById('selectionSummary').classList.remove('hidden');
        }

        function exitUnbookingMode() {
            isUnbookingMode = false;
            clearSelection();
            
            // Update UI for normal mode
            document.getElementById('mainContent').classList.remove('unbooking-mode');
            document.getElementById('unbookButton').classList.remove('hidden');
            document.getElementById('confirmUnbookButton').classList.add('hidden');
            document.getElementById('bookingForm').classList.remove('hidden');
            
            // Reset instructions
            document.getElementById('summaryText').textContent = '0 rooms selected';
        }

        // Function to update branch and batch when input fields change
        function updateRoomBranchBatch(roomId) {
            const branch = document.getElementById(`branch-${roomId}`)?.value || "";
            const batch = document.getElementById(`batch-${roomId}`)?.value || "";
            
            // Find if this room is already selected
            const roomIndex = selectedRooms.findIndex(room => room.roomId === roomId);
            
            if (roomIndex !== -1) {
                // Update the existing room entry
                selectedRooms[roomIndex] = { 
                    roomId, 
                    branch, 
                    batch 
                };
                document.getElementById("selectedRooms").value = JSON.stringify(selectedRooms);
            }
        }

        // Function to select/deselect rooms
        function toggleRoom(roomId, isBooked) {
            // If we're not in unbooking mode and the room is booked, don't allow selection
            if (!isUnbookingMode && isBooked) {
                return;
            }
            
            const roomElement = document.getElementById(`room-${roomId}`);
            
            if (selectedRooms.some(room => room.roomId === roomId)) {
                // Deselect room
                selectedRooms = selectedRooms.filter(room => room.roomId !== roomId);
                if (isBooked) {
                    roomElement.classList.remove("selected", "border-blue-500", "bg-blue-100");
                    roomElement.classList.add("border-red-200", "bg-red-50");
                } else {
                    roomElement.classList.remove("selected", "border-blue-500", "bg-blue-50");
                    roomElement.classList.add("border-green-200", "bg-green-50");
                }
            } else {
                // Select room
                const branch = document.getElementById(`branch-${roomId}`)?.value || "";
                const batch = document.getElementById(`batch-${roomId}`)?.value || "";
                
                selectedRooms.push({ roomId, branch, batch });
                if (isBooked) {
                    roomElement.classList.remove("border-red-200", "bg-red-50");
                    roomElement.classList.add("selected", "border-blue-500", "bg-blue-100");
                } else {
                    roomElement.classList.remove("border-green-200", "bg-green-50");
                    roomElement.classList.add("selected", "border-blue-500", "bg-blue-50");
                }
            }
            
            document.getElementById("selectedRooms").value = JSON.stringify(selectedRooms);
            updateSelectionUI();
        }

        function updateSelectionUI() {
            const selectedCount = selectedRooms.length;
            document.getElementById('selectedCount').textContent = selectedCount;
            
            if (isUnbookingMode) {
                document.getElementById('summaryText').innerHTML = 
                    `<span class="text-orange-600">${selectedCount} room${selectedCount !== 1 ? 's' : ''} selected for unbooking</span>`;
            } else {
                document.getElementById('summaryText').textContent = `${selectedCount} room${selectedCount !== 1 ? 's' : ''} selected for booking`;
            }
            
            // Update progress bar
            const progressPercentage = totalRooms > 0 ? (selectedCount / totalRooms) * 100 : 0;
            document.getElementById('selectionProgress').style.width = `${progressPercentage}%`;
            
            // Show/hide summary
            document.getElementById('selectionSummary').classList.toggle('hidden', selectedCount === 0);
            document.getElementById('selectionCounter').classList.toggle('hidden', selectedCount === 0);
            document.getElementById('clearButton').classList.toggle('hidden', selectedCount === 0);
        }

        function clearSelection() {
            selectedRooms.forEach(room => {
                const roomElement = document.getElementById(`room-${room.roomId}`);
                if (roomElement) {
                    // Check if room is booked or available to apply correct styling
                    const isBooked = roomElement.classList.contains('bg-red-50') || roomElement.classList.contains('border-red-200');
                    if (isBooked) {
                        roomElement.classList.remove("selected", "border-blue-500", "bg-blue-100");
                        roomElement.classList.add("border-red-200", "bg-red-50");
                    } else {
                        roomElement.classList.remove("selected", "border-blue-500", "bg-blue-50");
                        roomElement.classList.add("border-green-200", "bg-green-50");
                    }
                }
            });
            selectedRooms = [];
            document.getElementById("selectedRooms").value = JSON.stringify(selectedRooms);
            updateSelectionUI();
        }
        
    function confirmUnbooking() {
    if (selectedRooms.length === 0) {
        alert("Please select at least one room to free.");
        return;
    }

    if (!confirm("Are you sure you want to free the selected rooms?")) return;

    fetch("/freeRooms", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ roomIds: selectedRooms }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert("Rooms freed successfully!");
            // Redirect after successful unbooking
            window.location.href = "/BC_dashboard";
        } else {
            alert("Error freeing rooms: " + (data.message || "Unknown error"));
        }
    })
    .catch(error => {
        console.error("Error:", error);
        alert("Network error. Please try again.");
    });
}
    </script>
</body>
</html>